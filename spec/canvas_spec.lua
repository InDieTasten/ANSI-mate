local Canvas = require("lib.canvas")

describe("Canvas", function()
    describe("new", function()
        it("should create a new canvas with the specified width and height", function()
            local canvas = Canvas.new(10, 5)
            assert.are.equal(10, canvas.width)
            assert.are.equal(5, canvas.height)
            for y = 1, 5 do
                for x = 1, 10 do
                    assert.are.equal(" ", canvas.pixels[y][x])
                end
            end
        end)
    end)

    describe("setPixel", function()
        it("should set the specified pixel to the given character", function()
            local canvas = Canvas.new(10, 5)
            Canvas.setPixel(canvas, 3, 2, "X")
            assert.are.equal("X", canvas.pixels[2][3])
        end)
    end)

    describe("trySetPixel", function()
        it("should set the specified pixel to the given character if within bounds", function()
            local canvas = Canvas.new(10, 5)
            Canvas.trySetPixel(canvas, 3, 2, "X")
            assert.are.equal("X", canvas.pixels[2][3])
        end)

        it("should not set the pixel if out of bounds", function()
            local canvas = Canvas.new(10, 5)
            Canvas.trySetPixel(canvas, 11, 6, "X")
            for y = 1, 5 do
                for x = 1, 10 do
                    assert.are.equal(" ", canvas.pixels[y][x])
                end
            end
        end)
    end)

    describe("toText", function()
        it("should convert the canvas to a text representation", function()
            local canvas = Canvas.new(3, 2)
            Canvas.setPixel(canvas, 1, 1, "A")
            Canvas.setPixel(canvas, 2, 1, "B")
            Canvas.setPixel(canvas, 3, 1, "C")
            Canvas.setPixel(canvas, 1, 2, "D")
            Canvas.setPixel(canvas, 2, 2, "E")
            Canvas.setPixel(canvas, 3, 2, "F")
            local text = Canvas.toText(canvas)
            assert.are.equal("ABC\nDEF\n", text)
        end)
    end)

    describe("fromText", function()
        it("should create a canvas from a text representation", function()
            local text = "ABC\nDEF\n"
            local canvas = Canvas.fromText(text)
            assert.are.equal(3, canvas.width)
            assert.are.equal(2, canvas.height)
            assert.are.equal("A", canvas.pixels[1][1])
            assert.are.equal("B", canvas.pixels[1][2])
            assert.are.equal("C", canvas.pixels[1][3])
            assert.are.equal("D", canvas.pixels[2][1])
            assert.are.equal("E", canvas.pixels[2][2])
            assert.are.equal("F", canvas.pixels[2][3])
        end)
    end)

    describe("resize", function()
        it("should resize the canvas to the new dimensions", function()
            local canvas = Canvas.new(3, 2)
            Canvas.setPixel(canvas, 1, 1, "A")
            Canvas.setPixel(canvas, 2, 1, "B")
            Canvas.setPixel(canvas, 3, 1, "C")
            Canvas.setPixel(canvas, 1, 2, "D")
            Canvas.setPixel(canvas, 2, 2, "E")
            Canvas.setPixel(canvas, 3, 2, "F")
            local newCanvas = Canvas.resize(canvas, 2, 3)
            assert.are.equal(2, newCanvas.width)
            assert.are.equal(3, newCanvas.height)
            assert.are.equal("A", newCanvas.pixels[1][1])
            assert.are.equal("B", newCanvas.pixels[1][2])
            assert.are.equal("D", newCanvas.pixels[2][1])
            assert.are.equal("E", newCanvas.pixels[2][2])
            assert.are.equal(" ", newCanvas.pixels[3][1])
            assert.are.equal(" ", newCanvas.pixels[3][2])
        end)
    end)

    describe("fill", function()
        it("should fill the canvas with the specified character", function()
            local canvas = Canvas.new(3, 2)
            Canvas.setPixel(canvas, 1, 1, "A")
            Canvas.setPixel(canvas, 2, 1, "B")
            Canvas.setPixel(canvas, 3, 1, "C")
            Canvas.setPixel(canvas, 1, 2, "D")
            Canvas.setPixel(canvas, 2, 2, "E")
            Canvas.setPixel(canvas, 3, 2, "F")
            Canvas.fill(canvas, 2, 1, "X", false)
            assert.are.equal("A", canvas.pixels[1][1])
            assert.are.equal("X", canvas.pixels[1][2])
            assert.are.equal("C", canvas.pixels[1][3])
            assert.are.equal("D", canvas.pixels[2][1])
            assert.are.equal("E", canvas.pixels[2][2])
            assert.are.equal("F", canvas.pixels[2][3])
        end)
    end)
end)
